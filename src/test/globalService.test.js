/**
 * Test file ƒë·ªÉ ki·ªÉm tra globalService
 * Ch·∫°y file n√†y trong console ƒë·ªÉ test service
 */

import { globalService } from '@/services/appService';

/**
 * Test c∆° b·∫£n
 */
export const testBasicFunctionality = async () => {
  console.log('üß™ Testing Basic Functionality...');
  
  try {
    // Test 1: L·∫•y global config
    console.log('Test 1: L·∫•y global config');
    const config = await globalService.getGlobalConfig();
    console.log('‚úÖ Success:', config);
    
    // Test 2: Ki·ªÉm tra cache
    console.log('\nTest 2: Ki·ªÉm tra cache info');
    const cacheInfo = globalService.getCacheInfo();
    console.log('‚úÖ Cache Info:', cacheInfo);
    
    // Test 3: L·∫•y config l·∫ßn 2 (should use cache)
    console.log('\nTest 3: L·∫•y config l·∫ßn 2 (t·ª´ cache)');
    const config2 = await globalService.getGlobalConfig();
    console.log('‚úÖ Success (from cache):', config2);
    
    // Test 4: Force refresh
    console.log('\nTest 4: Force refresh');
    const config3 = await globalService.getGlobalConfig({}, true);
    console.log('‚úÖ Success (force refresh):', config3);
    
    // Test 5: Clear cache
    console.log('\nTest 5: Clear cache');
    globalService.clearCache();
    const cacheInfoAfterClear = globalService.getCacheInfo();
    console.log('‚úÖ Cache cleared:', cacheInfoAfterClear);
    
    return true;
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    return false;
  }
};

/**
 * Test v·ªõi parameters
 */
export const testWithParameters = async () => {
  console.log('üß™ Testing With Parameters...');
  
  try {
    // Test v·ªõi populate c·ª• th·ªÉ
    const config = await globalService.getGlobalConfig({
      populate: 'logo,contact'
    });
    
    console.log('‚úÖ Success with params:', config);
    return true;
  } catch (error) {
    console.error('‚ùå Test with params failed:', error);
    return false;
  }
};

/**
 * Test error handling
 */
export const testErrorHandling = async () => {
  console.log('üß™ Testing Error Handling...');
  
  try {
    // ƒê·∫ßu ti√™n, t·∫°o cache
    await globalService.getGlobalConfig();
    console.log('‚úÖ Cache created');
    
    // Gi·∫£ l·∫≠p l·ªói b·∫±ng c√°ch modify API endpoint t·∫°m th·ªùi
    // (Trong th·ª±c t·∫ø, l·ªói c√≥ th·ªÉ do network, server down, etc.)
    console.log('‚ö†Ô∏è Simulating API error...');
    
    // Service s·∫Ω fallback v·ªÅ cache khi g·∫∑p l·ªói
    const fallbackConfig = await globalService.getGlobalConfig();
    console.log('‚úÖ Fallback to cache successful:', fallbackConfig);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error handling test failed:', error);
    return false;
  }
};

/**
 * Ch·∫°y t·∫•t c·∫£ tests
 */
export const runAllTests = async () => {
  console.log('üöÄ Running All Global Service Tests...\n');
  
  const results = {
    basic: await testBasicFunctionality(),
    parameters: await testWithParameters(),
    errorHandling: await testErrorHandling()
  };
  
  console.log('\nüìä Test Results:');
  console.log('Basic Functionality:', results.basic ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('With Parameters:', results.parameters ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('Error Handling:', results.errorHandling ? '‚úÖ PASS' : '‚ùå FAIL');
  
  const allPassed = Object.values(results).every(result => result === true);
  console.log('\nüéØ Overall Result:', allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED');
  
  return results;
};

/**
 * Quick test ƒë·ªÉ ki·ªÉm tra API endpoint c√≥ ho·∫°t ƒë·ªông kh√¥ng
 */
export const quickConnectivityTest = async () => {
  console.log('üîå Quick Connectivity Test...');
  
  try {
    const config = await globalService.getGlobalConfig();
    
    if (config && config.data) {
      console.log('‚úÖ API endpoint is working!');
      console.log('Site Name:', config.data.siteName || 'Not available');
      console.log('Has Logo:', !!config.data.logo);
      console.log('Has Contact:', !!config.data.contact);
      console.log('Has Social Media:', !!config.data.socialMedia);
      return true;
    } else {
      console.log('‚ö†Ô∏è API responded but data structure is unexpected');
      console.log('Response:', config);
      return false;
    }
  } catch (error) {
    console.error('‚ùå API endpoint is not working:', error.message);
    return false;
  }
};

// Export ƒë·ªÉ c√≥ th·ªÉ ch·∫°y t·ª´ console
if (typeof window !== 'undefined') {
  // N·∫øu ch·∫°y trong browser, attach v√†o window ƒë·ªÉ c√≥ th·ªÉ test t·ª´ console
  window.globalServiceTest = {
    testBasicFunctionality,
    testWithParameters,
    testErrorHandling,
    runAllTests,
    quickConnectivityTest
  };
  
  console.log('üîß Global Service Test functions attached to window.globalServiceTest');
  console.log('Run: window.globalServiceTest.quickConnectivityTest() to test API connectivity');
  console.log('Run: window.globalServiceTest.runAllTests() to run all tests');
}

export default {
  testBasicFunctionality,
  testWithParameters,
  testErrorHandling,
  runAllTests,
  quickConnectivityTest
};
