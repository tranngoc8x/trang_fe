import apiService from './api';
import { API_ENDPOINTS } from '@/constants';
import { addLanguageToParams, getLanguageMenuId } from '../utils/apiUtils';


// V√≠ d·ª• v·ªÅ m·ªôt service ƒë·ªÉ g·ªçi API li√™n quan ƒë·∫øn users
export const userService = {
  // L·∫•y danh s√°ch users
  getUsers: (params) => {
    return apiService.get('/users', params);
  },

  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt user
  getUserById: (id) => {
    return apiService.get(`/users/${id}`);
  },

  // T·∫°o user m·ªõi
  createUser: (userData) => {
    return apiService.post('/users', userData);
  },

  // C·∫≠p nh·∫≠t th√¥ng tin user
  updateUser: (id, userData) => {
    return apiService.put(`/users/${id}`, userData);
  },

  // X√≥a user
  deleteUser: (id) => {
    return apiService.delete(`/users/${id}`);
  }
};

// V√≠ d·ª• v·ªÅ m·ªôt service kh√°c (v√≠ d·ª•: products)
export const productService = {
  // L·∫•y danh s√°ch products
  getProducts: (params) => {
    return apiService.get(API_ENDPOINTS.PRODUCTS, params);
  },

  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt product
  getProductById: (id, params) => {
    return apiService.get(`${API_ENDPOINTS.PRODUCT_DETAIL}/${id}`, params);
  },

  // C√°c ph∆∞∆°ng th·ª©c kh√°c...
};

// Service ƒë·ªÉ g·ªçi API tree-menus
export const menuService = {
  // L·∫•y t·∫•t c·∫£ menu t·ª´ API tree-menus
  getTreeMenu: (language = 'vi') => {
    const params = addLanguageToParams({}, language);
    return apiService.get(API_ENDPOINTS.TREE_MENU, params);
  },

  // L·∫•y menu theo ID t·ª´ API tree-menus
  getTreeMenuById: (id, language = 'vi') => {
    const languageMenuId = getLanguageMenuId(id, language);
    const params = addLanguageToParams({}, language);
    return apiService.get(`${API_ENDPOINTS.TREE_MENU}/${languageMenuId}`, params);
  }
};

// Service ƒë·ªÉ g·ªçi API kh√°ch h√†ng
export const clientService = {
  // L·∫•y danh s√°ch kh√°ch h√†ng
  getClients: (params) => {
    return apiService.get(API_ENDPOINTS.CLIENTS, params);
  },

  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√°ch h√†ng
  getClientById: (id) => {
    return apiService.get(`${API_ENDPOINTS.CLIENTS}/${id}`);
  }
};

// Service ƒë·ªÉ g·ªçi API slides
export const slideService = {
  // L·∫•y danh s√°ch slides
  getSlides: (params) => {
    return apiService.get(API_ENDPOINTS.SLIDES, params);
  },

  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt slide
  getSlideById: (id) => {
    return apiService.get(`${API_ENDPOINTS.SLIDES}/${id}`);
  }
};

// Service ƒë·ªÉ g·ªçi API home page content
export const homePageService = {
  // L·∫•y n·ªôi dung trang ch·ªß
  getHomePageContent: (params, language = 'vi') => {
    const languageParams = addLanguageToParams(params, language);
    return apiService.get(API_ENDPOINTS.HOME_PAGE_CONTENT, languageParams);
  }
};

// Service ƒë·ªÉ g·ªçi API about-uses
export const aboutService = {
  // L·∫•y danh s√°ch about-uses
  getAboutUses: (params) => {
    return apiService.get(API_ENDPOINTS.ABOUT_USES, params);
  },

  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt about-use
  getAboutUseById: (id, params) => {
    return apiService.get(`${API_ENDPOINTS.ABOUT_USES}/${id}`, params);
  }
};

// Service ƒë·ªÉ g·ªçi API pricing (bao-gia-and-tu-vans)
export const pricingService = {
  // L·∫•y d·ªØ li·ªáu b√°o gi√° & t∆∞ v·∫•n
  getPricing: (params) => {
    return apiService.get(API_ENDPOINTS.PRICING, params);
  },
  savePricing: (data) => {
    return apiService.post(API_ENDPOINTS.PRICING, { data: data });
  }
};

// Service ƒë·ªÉ g·ªçi API projects (articles)
export const projectsService = {
  // L·∫•y d·ªØ li·ªáu d·ª± √°n (b√†i vi·∫øt)
  getProjects: (params) => {
    return apiService.get(API_ENDPOINTS.PROJECTS, params);
  }
};
export const pageService = {
  getPage: (slug) => {
    return apiService.get(`${API_ENDPOINTS.PAGE}`, {
      filters: { slug },
      populate: "*"
    });
  }
};

// Cache cho global configuration
let globalConfigCache = null;
let globalConfigCacheTime = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t cache

/**
 * Service ƒë·ªÉ g·ªçi API global configuration
 * L·∫•y c·∫•u h√¨nh to√†n c·ª•c c·ªßa website nh∆∞ logo, th√¥ng tin li√™n h·ªá, social media, v.v.
 */
export const globalService = {
  /**
   * L·∫•y c·∫•u h√¨nh global c·ªßa website
   * @param {Object} params - Tham s·ªë query (populate, locale, etc.)
   * @param {boolean} forceRefresh - B·∫Øt bu·ªôc refresh cache
   * @returns {Promise<GlobalApiResponse>} Promise ch·ª©a d·ªØ li·ªáu global config
   */
  getGlobalConfig: async (params = {}, forceRefresh = false) => {
    try {
      // Ki·ªÉm tra cache n·∫øu kh√¥ng b·∫Øt bu·ªôc refresh
      if (!forceRefresh && globalConfigCache && globalConfigCacheTime) {
        const now = Date.now();
        const cacheAge = now - globalConfigCacheTime;

        // N·∫øu cache c√≤n hi·ªáu l·ª±c, tr·∫£ v·ªÅ cache
        if (cacheAge < CACHE_DURATION) {
          return globalConfigCache;
        }
      }

      // G·ªçi API tr·ª±c ti·∫øp v·ªõi axios v√† base URL admin
      const axiosResponse = await apiService.get(API_ENDPOINTS.GLOBAL, params);

      // L∆∞u v√†o cache (ch·ªâ l∆∞u data, kh√¥ng l∆∞u to√†n b·ªô axios response)
      const response = axiosResponse.data;
      globalConfigCache = response;
      globalConfigCacheTime = Date.now();

      return response;

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i global config:', error);

      // N·∫øu c√≥ cache c≈©, tr·∫£ v·ªÅ cache c≈© khi g·∫∑p l·ªói
      if (globalConfigCache) {
        return globalConfigCache;
      }

      // N·∫øu kh√¥ng c√≥ cache, throw error
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh global: ${error.message}`);
    }
  },

  /**
   * X√≥a cache global config
   */
  clearCache: () => {
    globalConfigCache = null;
    globalConfigCacheTime = null;
    console.log('üóëÔ∏è ƒê√£ x√≥a cache global config');
  },

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i cache
   * @returns {Object} Th√¥ng tin v·ªÅ cache
   */
  getCacheInfo: () => {
    return {
      hasCache: !!globalConfigCache,
      cacheTime: globalConfigCacheTime,
      cacheAge: globalConfigCacheTime ? Date.now() - globalConfigCacheTime : null,
      isExpired: globalConfigCacheTime ? (Date.now() - globalConfigCacheTime) > CACHE_DURATION : true
    };
  }
};

export default {
  userService,
  productService,
  menuService,
  clientService,
  slideService,
  homePageService,
  aboutService,
  pricingService,
  projectsService,
  pageService,
  globalService
};
